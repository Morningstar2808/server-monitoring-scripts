#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node Exporter —Å –∞–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º Angie –∏ cAdvisor
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
# =============================================================================

set -e
printf "=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ ===\n"

# [... –ø—Ä–æ–≤–µ—Ä–∫–∏ root, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, IP, SERVER_NAME –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ—Ä—Ç
check_port_process() {
    local port=$1
    local output=$(ss -lpn | grep ":$port ")
    if [ -n "$output" ]; then
        local process=$(echo "$output" | grep -oP 'users:\(\("([^"]+)"' | grep -oP '"\K[^"]+' 2>/dev/null || echo "unknown")
        echo "$process"
    else
        echo ""
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
find_free_port_range() {
    local start_port=$1
    local end_port=$2
    local service_name=${3:-"unknown"}
    
    printf "–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –¥–ª—è %s –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ %d-%d...\n" "$service_name" "$start_port" "$end_port"
    
    for port in $(seq $start_port $end_port); do
        local process=$(check_port_process $port)
        if [ -z "$process" ]; then
            printf "‚úì –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç %d –¥–ª—è %s\n" "$port" "$service_name"
            echo $port
            return
        elif [ "$process" = "cadvisor" ] && [ "$service_name" = "cAdvisor" ]; then
            # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π cAdvisor
            if timeout 5 curl -s http://localhost:$port/metrics 2>/dev/null | grep -q "container_cpu_usage_seconds_total"; then
                printf "‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–±–æ—á–∏–π cAdvisor –Ω–∞ –ø–æ—Ä—Ç—É %d (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º)\n" "$port"
                echo $port
                return
            fi
        fi
        printf "‚ö† –ü–æ—Ä—Ç %d –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º '%s', –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π...\n" "$port" "$process"
    done
    
    printf "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ %d-%d –¥–ª—è %s\n" "$start_port" "$end_port" "$service_name"
    echo ""
}

# [... NODE EXPORTER —Å–µ–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...]

# CADVISOR (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω 9080-9089)
CADVISOR_INSTALLED=false
CADVISOR_PORT=""

printf "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ cAdvisor ===\n"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π systemd —Å–µ—Ä–≤–∏—Å
if systemctl is-active --quiet cadvisor 2>/dev/null; then
    printf "‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π systemd —Å–µ—Ä–≤–∏—Å cAdvisor\n"
    
    EXISTING_PORT=$(systemctl show cadvisor -p ExecStart --value 2>/dev/null | grep -oP '\--port=\K[0-9]+' || echo "9080")
    printf "–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ cAdvisor –Ω–∞ –ø–æ—Ä—Ç—É %s...\n" "$EXISTING_PORT"
    
    if timeout 5 curl -s http://localhost:$EXISTING_PORT/metrics 2>/dev/null | grep -q "container_cpu_usage_seconds_total"; then
        printf "‚úì cAdvisor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É %s (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º)\n" "$EXISTING_PORT"
        CADVISOR_INSTALLED=true
        CADVISOR_PORT=$EXISTING_PORT
    else
        printf "‚ö† –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cAdvisor\n"
        systemctl stop cadvisor
    fi
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cAdvisor, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ "$CADVISOR_INSTALLED" = false ]; then
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 9080-9089 –¥–ª—è cAdvisor (prometheus ecosystem)
    CADVISOR_PORT=$(find_free_port_range 9080 9089 "cAdvisor")
    
    if [ -z "$CADVISOR_PORT" ]; then
        printf "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è cAdvisor –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 9080-9089\n"
        printf "   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ cAdvisor –≤—Ä—É—á–Ω—É—é\n"
    else
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        EXISTING_PROCESS=$(check_port_process $CADVISOR_PORT)
        if [ "$EXISTING_PROCESS" = "cadvisor" ]; then
            printf "‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–±–æ—á–∏–π cAdvisor –Ω–∞ –ø–æ—Ä—Ç—É %s, –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º\n" "$CADVISOR_PORT"
            CADVISOR_INSTALLED=true
        else
            printf "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cAdvisor –Ω–∞ –ø–æ—Ä—Ç %s...\n" "$CADVISOR_PORT"
            
            systemctl stop cadvisor 2>/dev/null || true
            systemctl disable cadvisor 2>/dev/null || true
            docker stop cadvisor 2>/dev/null || true
            docker rm cadvisor 2>/dev/null || true
            
            case "$ARCH" in
                x86_64) CADVISOR_ARCH="amd64";;
                aarch64) CADVISOR_ARCH="arm64";;
                armv7l) CADVISOR_ARCH="arm";;
                *) printf "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è cAdvisor: %s\n" "$ARCH"; exit 1;;
            esac
            
            CADVISOR_VERSION="v0.49.1"
            cd /tmp
            printf "–ó–∞–≥—Ä—É–∂–∞–µ–º cAdvisor %s –¥–ª—è %s...\n" "$CADVISOR_VERSION" "$CADVISOR_ARCH"
            
            if wget -q --show-progress "https://github.com/google/cadvisor/releases/download/${CADVISOR_VERSION}/cadvisor-${CADVISOR_VERSION}-linux-${CADVISOR_ARCH}"; then
                mv "cadvisor-${CADVISOR_VERSION}-linux-${CADVISOR_ARCH}" /usr/local/bin/cadvisor
                chmod +x /usr/local/bin/cadvisor
                
                printf "–°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å cAdvisor –Ω–∞ –ø–æ—Ä—Ç—É %s (Prometheus ecosystem –¥–∏–∞–ø–∞–∑–æ–Ω)...\n" "$CADVISOR_PORT"
                cat > /etc/systemd/system/cadvisor.service << EOF
[Unit]
Description=cAdvisor (Container Advisor)
Documentation=https://github.com/google/cadvisor
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/cadvisor --port=$CADVISOR_PORT --listen_ip=0.0.0.0
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
                
                systemctl daemon-reload && systemctl enable cadvisor && systemctl start cadvisor
                sleep 5
                
                if systemctl is-active --quiet cadvisor; then
                    printf "‚úì cAdvisor —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n" "$CADVISOR_PORT"
                    CADVISOR_INSTALLED=true
                else
                    printf "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ cAdvisor\n"
                    systemctl status cadvisor --no-pager
                fi
            else
                printf "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cAdvisor\n"
            fi
        fi
    fi
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ cAdvisor
if [ "$CADVISOR_INSTALLED" = true ] && [ -n "$CADVISOR_PORT" ]; then
    printf "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ cAdvisor –Ω–∞ –ø–æ—Ä—Ç—É %s...\n" "$CADVISOR_PORT"
    for i in {1..3}; do
        if timeout 5 curl -s http://localhost:$CADVISOR_PORT/metrics 2>/dev/null | grep -q "container_cpu_usage_seconds_total"; then
            printf "‚úì cAdvisor –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É %s\n" "$CADVISOR_PORT"
            break
        else
            printf "–ü–æ–ø—ã—Ç–∫–∞ %d/3...\n" "$i"
            sleep 2
        fi
        if [ $i -eq 3 ]; then 
            printf "‚ùå cAdvisor –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
            CADVISOR_INSTALLED=false
        fi
    done
fi

# ANGIE (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω 8081-8089)
ANGIE_DETECTED=false
ANGIE_METRICS_PORT=""

printf "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ Angie ===\n"
if pgrep -x "angie" > /dev/null; then
    printf "‚úì Angie –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n"
    ANGIE_DETECTED=true
    
    printf "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Angie –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö...\n"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
    for port in 8081 8082 8083 80 443; do
        HTTP_CODE=$(timeout 5 curl -s -o /dev/null -w "%{http_code}" "http://localhost:$port/prometheus" 2>/dev/null || echo "000")
        if [[ "$HTTP_CODE" =~ ^(200|204)$ ]]; then
            ANGIE_METRICS_PORT=$port
            printf "‚úì –ú–µ—Ç—Ä–∏–∫–∏ Angie –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ø–æ—Ä—Ç—É %s\n" "$port"
            break
        fi
    done
    
    if [ -z "$ANGIE_METRICS_PORT" ]; then
        printf "‚ö† Angie –Ω–∞–π–¥–µ–Ω, –Ω–æ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö\n"
        printf "   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ Angie –Ω–∞ –ø–æ—Ä—Ç—É 8081-8089 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n"
    fi
else
    printf "‚Ñπ Angie –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n"
fi

# [... –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...]

# –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—Ç–æ–≤
printf "\n==================================================\n"
printf "üéâ –£–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!\n"
printf "==================================================\n"
printf "–°–µ—Ä–≤–µ—Ä: %s\n" "$SERVER_NAME"
printf "IP –∞–¥—Ä–µ—Å: %s\n" "$TAILSCALE_IP"
printf "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: %s (%s)\n" "$ARCH" "$ARCH_SUFFIX"

printf "\nüìä –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –°–ï–†–í–ò–°–´:\n"
printf "Node Exporter: http://%s:9100/metrics (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç)\n" "$TAILSCALE_IP"

if [ "$CADVISOR_INSTALLED" = true ] && [ -n "$CADVISOR_PORT" ]; then
    printf "cAdvisor: http://%s:%s/metrics (Prometheus ecosystem: 9080-9089)\n" "$TAILSCALE_IP" "$CADVISOR_PORT"
else
    printf "cAdvisor: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
fi

if [ "$ANGIE_DETECTED" = true ] && [ -n "$ANGIE_METRICS_PORT" ]; then
    printf "Angie: http://%s:%s/prometheus (–≤–µ–±-—Å–µ—Ä–≤–∏—Å—ã: 8081-8089)\n" "$TAILSCALE_IP" "$ANGIE_METRICS_PORT"
fi

printf "\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–û–†–¢–ê–ú:\n"
printf "‚Ä¢ 9080-9089: cAdvisor (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)\n" 
printf "‚Ä¢ 8080: CrowdSec, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–º)\n"
printf "‚Ä¢ 8081-8089: Angie metrics, –≤–µ–±-API\n"
printf "‚Ä¢ 9100: Node Exporter (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)\n"
printf "‚Ä¢ 9090: Prometheus (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π)\n"

printf "\nüìã –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì:\n"

COMMAND_ARGS="\"$SERVER_NAME\" \"$TAILSCALE_IP\""
if [ -n "$ANGIE_METRICS_PORT" ]; then 
    COMMAND_ARGS="$COMMAND_ARGS \"$ANGIE_METRICS_PORT\""
fi
if [ "$CADVISOR_INSTALLED" = true ] && [ -n "$CADVISOR_PORT" ]; then 
    COMMAND_ARGS="$COMMAND_ARGS \"$CADVISOR_PORT\""
fi

printf "curl -fsSL https://raw.githubusercontent.com/Morningstar2808/server-monitoring-scripts/master/add | bash -s %s\n" "$COMMAND_ARGS"
printf "\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç–æ–≤ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.\n"

