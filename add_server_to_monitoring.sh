#!/bin/bash

# =============================================================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Prometheus —Å file_sd_configs
# –í–µ—Ä—Å–∏—è 2.2.0 - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CrowdSec
# =============================================================================

set -e

FORCE=false
if [ "${!#}" = "--force" ]; then
    FORCE=true
    set -- "${@:1:$(($#-1))}"
fi

if [ $# -lt 2 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <server_name> <tailscale_ip> [angie_port] [cadvisor_port] [--force]"
    echo "–ü—Ä–∏–º–µ—Ä: $0 remnawave 100.79.31.83 '' 9080 --force"
    exit 1
fi

SERVER_NAME="$1"
TAILSCALE_IP="$2"
ANGIE_PORT="${3:-}"
CADVISOR_PORT="${4:-}"

TARGETS_DIR="/etc/prometheus/targets"
mkdir -p "$TARGETS_DIR/node" "$TARGETS_DIR/cadvisor" "$TARGETS_DIR/angie"

NODE_FILE="$TARGETS_DIR/node/$SERVER_NAME.yml"
CADVISOR_FILE="$TARGETS_DIR/cadvisor/$SERVER_NAME.yml"
ANGIE_FILE="$TARGETS_DIR/angie/$SERVER_NAME.yml"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
if [ -f "$NODE_FILE" ] && [ "$FORCE" != true ]; then
    echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–µ—Ä–≤–µ—Ä $SERVER_NAME —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    read -p "–û–±–Ω–æ–≤–∏—Ç—å? (y/N): " response
    if [[ ! $response =~ ^[Yy]$ ]]; then
        exit 0
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ $TAILSCALE_IP..."

echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º Node Exporter –Ω–∞ $TAILSCALE_IP:9100..."
if ! timeout 10 curl -s "http://$TAILSCALE_IP:9100/metrics" | grep -q "node_cpu_seconds_total"; then
    echo "–û—à–∏–±–∫–∞: Node Exporter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    exit 1
fi
echo "‚úì Node Exporter –¥–æ—Å—Ç—É–ø–µ–Ω"

CADVISOR_AVAILABLE=false
if [ -n "$CADVISOR_PORT" ]; then
    echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º cAdvisor –Ω–∞ $TAILSCALE_IP:$CADVISOR_PORT..."
    if timeout 10 curl -s "http://$TAILSCALE_IP:$CADVISOR_PORT/metrics" | grep -q "container_cpu_usage_seconds_total"; then
        CADVISOR_AVAILABLE=true
        echo "‚úì cAdvisor –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        echo "‚ö† cAdvisor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω)"
    fi
fi

ANGIE_AVAILABLE=false
if [ -n "$ANGIE_PORT" ]; then
    echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º Angie –Ω–∞ $TAILSCALE_IP:$ANGIE_PORT..."
    if timeout 10 curl -s "http://$TAILSCALE_IP:$ANGIE_PORT/prometheus" | grep -q "angie_"; then
        ANGIE_AVAILABLE=true
        echo "‚úì Angie –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        echo "‚ö† Angie –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω)"
    fi
fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è YAML-—Ñ–∞–π–ª–æ–≤
echo "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º YAML-—Ñ–∞–π–ª—ã –≤ $TARGETS_DIR..."

cat > "$NODE_FILE" << EOF
- targets: ['$TAILSCALE_IP:9100']
  labels:
    server_name: '$SERVER_NAME'
    service_type: 'node_exporter'
    environment: 'production'
EOF

if [ "$CADVISOR_AVAILABLE" = true ]; then
    cat > "$CADVISOR_FILE" << EOF
- targets: ['$TAILSCALE_IP:$CADVISOR_PORT']
  labels:
    server_name: '$SERVER_NAME'
    service_type: 'cadvisor_host'
    environment: 'production'
EOF
else
    rm -f "$CADVISOR_FILE"
fi

if [ "$ANGIE_AVAILABLE" = true ]; then
    cat > "$ANGIE_FILE" << EOF
- targets: ['$TAILSCALE_IP:$ANGIE_PORT']
  labels:
    server_name: '$SERVER_NAME'
    service_type: 'angie'
    environment: 'production'
EOF
else
    rm -f "$ANGIE_FILE"
fi

chown -R prometheus:prometheus "$TARGETS_DIR"
echo "‚úì YAML-—Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"

# Reload Prometheus
if curl -X POST http://localhost:9090/-/reload; then
    echo "‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prometheus –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞"
else
    echo "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å reload, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å..."
    systemctl restart prometheus
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ targets
sleep 5
echo ""
echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö targets ==="
TARGET_STATUS=$(curl -s http://localhost:9090/api/v1/targets | jq -r ".data.activeTargets[] | select(.labels.server_name==\"$SERVER_NAME\") | \"\(.labels.job): \(.health)\"")

if [ -n "$TARGET_STATUS" ]; then
    echo "$TARGET_STATUS"
    echo "‚úì –°–µ—Ä–≤–µ—Ä $SERVER_NAME —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω"
else
    echo "‚ö† Targets –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ refresh_interval (1m) –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ CrowdSec
echo ""
echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ CrowdSec ==="
CROWDSEC_METRICS=$(curl -s "http://localhost:8428/api/v1/query" -d "query=cs_lapi_decision{instance=\"$SERVER_NAME\"}" 2>/dev/null | jq -r '.data.result | length')

if [ "$CROWDSEC_METRICS" -gt 0 ] 2>/dev/null; then
    echo "‚úì CrowdSec –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ($CROWDSEC_METRICS –∑–∞–ø–∏—Å–µ–π)"
    echo "  –î–∞—à–±–æ—Ä–¥: CrowdSec Cyber Threat Insights"
else
    echo "‚Ñπ CrowdSec –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö alerts)"
    echo "  –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ HTTP push"
fi

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
echo ""
echo "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
echo "- Node Exporter: $NODE_FILE"
if [ "$CADVISOR_AVAILABLE" = true ]; then echo "- cAdvisor: $CADVISOR_FILE"; fi
if [ "$ANGIE_AVAILABLE" = true ]; then echo "- Angie: $ANGIE_FILE"; fi

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: http://localhost:9090/targets"
echo ""
echo "üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∞—à–±–æ—Ä–¥—ã Grafana:"
echo "- Node Exporter Full: ID 1860"
echo "- Docker Container & Host Metrics: ID 10619"
if [ "$CADVISOR_AVAILABLE" = true ]; then echo "- Docker and system monitoring: ID 893"; fi
echo "- CrowdSec Cyber Threat Insights (–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ)"
